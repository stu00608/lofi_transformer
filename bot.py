import os
import logging
import discord
from discord.ext import commands, tasks
from datetime import datetime
import asyncio
import assets.settings.setting as setting
from glob import glob

token = os.environ["LOFI_TRANSFORMER_TOKEN"]

logger = setting.logging.getLogger("bot")

class Bot(commands.Bot):
    def __init__(self):
        intents = discord.Intents.default()
        intents.members = True
        intents.message_content = True
        
        description = "Listen to LoFi music generated by AI!"

        super().__init__(
            command_prefix=commands.when_mentioned_or('!'), 
            intents=intents,
            description=description,
            activity=discord.Activity(type=discord.ActivityType.listening, name="AI's LoFi Beat."),
            status=discord.Status.online
        )

        self.initial_extensions = [
            "cogs.lofi_transformer_player"
        ]

    async def on_ready(self):
        logger.info(f'Logged in as {self.user} (ID: {self.user.id})')
        os.makedirs("./loop_file", exist_ok=True)
        loop_files = glob("./loop_file/*")
        for f in loop_files:
            os.remove(f)
        logger.info("Cleaned ./loop_file")
    
    async def setup_hook(self) -> None:
        for ext in self.initial_extensions:
            await self.load_extension(ext)
        logger.info("Syncing command to global...")
        cmds = await self.tree.sync()
        logger.info(f"{len(cmds)} commands synced!")

    

bot = Bot()

@bot.event
async def on_voice_state_update(member, before, after):
    voice_state = member.guild.voice_client
    if voice_state is not None and len(voice_state.channel.members) == 1:
        # If the bot is connected to a channel and the bot is the only one in the channel
        logger.info(f"{bot.user} is getting out from voice channel.")
        await voice_state.disconnect() # Disconnect the bot from the channel

if __name__ == "__main__":
    bot.run(token, root_logger=True)