import discord
from discord.ext import commands
import os
import openai
import requests
from typing import List, Optional

openai_api_key = os.environ["OPENAI_API_KEY"]

def prepare_codex_prompt(strings: List[str]) -> str:
    """Generate a string with a numbering pattern for a given list of strings.

    Args:
        strings: A list of strings to be formatted.

    Returns:
        A string with the desired pattern, including triple quotes at the beginning and end. Each string in the list is
        formatted with a numbering prefix, starting from 1 and incrementing by 1 for each string.
    """
    # Initialize an empty list to store the formatted strings
    formatted_strings = []

    # Iterate over the list of strings
    for i, s in enumerate(strings):
        # Format the string with the desired pattern
        formatted_string = f"{i+1}. {s}"
        # Append the formatted string to the list
        formatted_strings.append(formatted_string)

    # Join the list of formatted strings with newline characters
    result = "\n".join(formatted_strings)

    # Return the result wrapped in triple quotes
    return f"\"\"\"\n{result}\n\"\"\""

async def generate_code(prompt):
    """
    Requests a completion from the OpenAI Code-DaVinci-002 model and returns the completion as a string.
    
    Parameters:
    - prompt (str): The prompt for which to generate a completion.
    
    Returns:
    - completion (str): The completion generated by the model.
    """
    openai.api_key = openai_api_key
    completions = openai.Completion.create(
        engine="code-davinci-002",
        prompt=prompt,
        max_tokens=1900,
        n=1,
        temperature=0.5,
        stop="\"\"\""
    )
    return completions.choices[0].text

class GPT3Helper(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        print(openai_api_key)

    @commands.hybrid_command(name="code", description="Call OpenAI code-davinci-002 API to generate code piece by providing prompts.")
    async def _code(self, ctx, *, prompt: Optional[str]):
        await ctx.defer()
        fixed_prompt = prepare_codex_prompt(prompt.split(". "))
        code = await generate_code(fixed_prompt)
        await ctx.send(f"{fixed_prompt}")
        await ctx.send(f"```python\n{code}\n\n```")
    
    #TODO: Add a command to update api key.

async def setup(client):
    await client.add_cog(GPT3Helper(client))